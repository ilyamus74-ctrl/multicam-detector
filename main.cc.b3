// ========================= includes start =========================
#include <csignal>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <thread>
#include <chrono>
#include <cctype>
#include <memory>          // уникальные указатели

#include "web_server.h"    // <-- твой сервер (namespace mc)
// ========================= includes end ===========================


// ========================= globals start ==========================
static volatile std::sig_atomic_t g_run = 1;

static void handle_sigint(int) { g_run = 0; }
// ========================= globals end ============================


// ========================= cli parsing start ======================
struct CliOptions {
  std::string config_path;   // путь к json
  int http_fps_limit = -1;   // override с CLI, если >=0
};

static CliOptions parse_cli(int argc, char** argv) {
  CliOptions opt;

  for (int i = 1; i < argc; ++i) {
    std::string a = argv[i];
    if (a == "--config" && i + 1 < argc) {
      opt.config_path = argv[++i];
    } else if (a.rfind("--config=", 0) == 0) {
      opt.config_path = a.substr(9);
    } else if (a == "--http-fps-limit" && i + 1 < argc) {
      opt.http_fps_limit = std::stoi(argv[++i]);
    } else if (a.rfind("--http-fps-limit=", 0) == 0) {
      opt.http_fps_limit = std::stoi(a.substr(18));
    }
  }

  auto file_exists = [](const std::string& p) {
    std::ifstream f(p);
    return f.good();
  };

  // fallback, если не указали --config или файл не найден
  if (opt.config_path.empty() || !file_exists(opt.config_path)) {
    const std::string fallbacks[] = {"config/config.json", "../config/config.json", "config.json"};
    for (const std::string& fb : fallbacks) {
      if (file_exists(fb)) { opt.config_path = fb; break; }
    }
  }
  return opt;
}
// ========================= cli parsing end ========================


// ========================= config minimal start ===================
struct AppConfigMinimal {
  int http_port = 8080;
  int http_fps_limit = 20;
  std::string display_camera = "cam1";
};

// Очень простой граббер значений из JSON без зависимостей.
// Достаём только три ключа, которые нам нужны: port, http_fps_limit, display_camera.
static bool load_config_minimal(const std::string& path,
                                AppConfigMinimal& out_cfg,
                                std::string& err) {
  std::ifstream f(path);
  if (!f) { err = "cannot open file"; return false; }

  std::stringstream ss; ss << f.rdbuf();
  std::string s = ss.str();

  auto get_int = [&](const char* key, int def) {
    size_t p = s.find(key);
    if (p == std::string::npos) return def;
    p = s.find_first_of("0123456789", p);
    if (p == std::string::npos) return def;
    long v = 0;
    while (p < s.size() && std::isdigit(static_cast<unsigned char>(s[p]))) {
      v = v * 10 + (s[p] - '0'); ++p;
    }
    return static_cast<int>(v);
  };
  auto get_str = [&](const char* key, const std::string& def) {
    size_t p = s.find(key);
    if (p == std::string::npos) return def;
    p = s.find('"', p + 1); if (p == std::string::npos) return def;
    size_t q = s.find('"', p + 1); if (q == std::string::npos) return def;
    return s.substr(p + 1, q - (p + 1));
  };

  out_cfg.http_port      = get_int("\"port\"", out_cfg.http_port);
  out_cfg.http_fps_limit = get_int("\"http_fps_limit\"", out_cfg.http_fps_limit);
  out_cfg.display_camera = get_str("\"display_camera\"", out_cfg.display_camera);
  return true;
}
// ========================= config minimal end =====================


// ========================= app runtime start ======================
class AppRuntime {
public:
  bool start(const AppConfigMinimal& cfg) {
    std::cout << "[bootstrap] HTTP: port=" << cfg.http_port
              << " fps_limit=" << cfg.http_fps_limit
              << " display='" << cfg.display_camera << "'" << std::endl;

    display_camera_ = cfg.display_camera;

    mc::WebServerConfig wcfg;
    wcfg.port = cfg.http_port;
    wcfg.fps_limit = cfg.http_fps_limit;

    http_ = mc::CreateWebServer();
    if (!http_) {
      std::cerr << "[bootstrap] CreateWebServer() returned null" << std::endl;
      return false;
    }

    // опционально реагируем на переключение камеры из UI
    http_->SetOnSwitchCamera([this](const mc::CamId& id){
      display_camera_ = id;
      std::cout << "[http] switch camera -> " << display_camera_ << std::endl;
    });

    if (!http_->Start(wcfg)) {
      std::cerr << "[bootstrap] WebServer::Start() failed" << std::endl;
      http_.reset();
      return false;
    }

    return true;
  }

  void stop() {
    if (http_) {
      http_->Stop();
      http_.reset();
    }
  }

private:
  std::unique_ptr<mc::WebServer> http_;
  std::string display_camera_;
};
// ========================= app runtime end ========================


// ========================= main function start ====================
int main(int argc, char** argv) {
  std::signal(SIGINT,  handle_sigint);
  std::signal(SIGTERM, handle_sigint);

  CliOptions opts = parse_cli(argc, argv);
  if (opts.config_path.empty()) {
    std::cerr << "Config load failed: --config (file not found)\n";
    return 2;
  }

  std::cout << "Loading config: " << opts.config_path << std::endl;

  AppConfigMinimal cfg;
  std::string err;
  if (!load_config_minimal(opts.config_path, cfg, err)) {
    std::cerr << "Config load failed: " << err << std::endl;
    return 2;
  }

  if (opts.http_fps_limit >= 0) {
    cfg.http_fps_limit = opts.http_fps_limit; // override с CLI
  }

  std::cout << "Config OK (port=" << cfg.http_port
            << ", http_fps_limit=" << cfg.http_fps_limit
            << ", display_camera=\"" << cfg.display_camera << "\")\n";

  AppRuntime rt;
  std::cout << "[bootstrap] App started." << std::endl;

  if (!rt.start(cfg)) {
    std::cerr << "[bootstrap] start() failed — exiting\n";
    return 1;
  }

  while (g_run) {
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
  }

  rt.stop();
  std::cout << "[bootstrap] App stopped.\n";
  return 0;
}
// ========================= main function end ======================
